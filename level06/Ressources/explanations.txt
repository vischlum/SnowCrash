We find two file in /home/user/leve06, a binary and a php flag

the binary executes the php flag. We can not chang any.

The php file accepts arguments on argv. The binary runs as flag06. We must exploit it to run getflag.

level06.php us preg_replace on the content of the file situated on argv[1].

It uses preg_replace with the /e option on the second capture group

$a = preg_replace("/(\[x (.*)\])/e", "y(\"\\2\")", $a);

it means php code can be evaluated.

we craft a payload that will be selected by the regex and then evaluated by the y function

[x ${`getflag`}]

we put in in a file in /tmp and call the binary with it as an argument. The flag is in the php error.
